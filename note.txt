学んだこと
・クラスの設計の重要性
機能の実現に向けてどういった工程が必要で、どのように細分化すれば効率的なコードになるのかを十分に考え、
それぞれのクラスの責務をはっきりとさせておく必要がある。
クラス設計がはっきりとしているコードの方が後の修正にもすぐに対応でき、保守性が断然高いことを身をもって体感した。
今回初めはクラスの概念を漠然と大きく捉えすぎていたため、一つのクラスで多くの責務を負ってしまうこととなり処理が複雑化していた。
クラスのオブジェクトがそれぞれ持つべきデータは適切であるのかをそのクラスの責務を考慮した上で判断する必要がある。
同じような操作はできるだけ分解してメソッドとして定義し、各メソッド内で利用できるようにする。


・クラスの概念
クラス名はオブジェクトがどういう意味を持つのかがわかるように命名し、責務をこなせるような適切なデータを持たせる。
メソッド名はクラスオブジェクトに対して実行するため、そのオブジェクトにどのような処理を行うのかを説明するように命名する。
特に、他クラスから呼び出す際に別のファイルで定義されているインスタンス変数やメソッドを見なくてもわかるように定義する。


・条件分岐
コードをすっきりさせるために、簡単な条件分岐に対しては後置if、三項演算子が利用できないかを考える。
値が何と一致するのかを問うような場合はcaseを利用する方が適切である。
実行ファイルの実行部分はif __FILE__ == $0の形で実行したファイルがそのファイルであるかをチェックする。
if __FILE__ == $0はデバッグ用に実行ファイル以外でも利用することがある。


・Rubyコード内からの他のファイルの扱い
Fileクラス、CSVクラス、IOクラスのドキュメントを読み、役割やメソッドを学んだ。
CSVクラスの場合、headersを利用することで読み込んだファイルのデータをわかりやすく呼び出すことができる。
ファイルをopenする際はブロック変数を利用する。


・ハッシュ、配列について
データをenumのようにして利用する際は配列の順番に意味を持たせるのではなく、ハッシュのキーと値として定義する。
上限の決まっていない数のオブジェクトを生成する場合配列に追加して利用する。


・定数利用について
不変の値を他クラスから参照したい場合に、インスタンス変数として不変の値を代入していたが、
クラスの責務がわかりやすいようにそもそも不変の値はどこかのクラスで定数として定義し、そのクラスで操作を完結させる。


・その他文法について
実行部分はオブジェクトを生成し、アクションを実行するのみで、ロジックは記載しない。
どの部分がなんのためのコードがわかりやすいよう定数定義、アクセサ定義、ガード節のあとは空行をいれる。
initializeにもロジックは記載せず、欲しい値を返すメソッドを定義し、
@instance = method_name
の形で代入する。


・全体を通して
誰が読んでもわかるコードを目指すため、インスタンス変数名やメソッド名に気を付ける。
正しい結果が得られるとしても、比較する値の取り出し方や、適切なメソッドを呼び出しているかに気を付ける。
